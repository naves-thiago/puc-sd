Protocolo

As mensagens trafegadas entre o servidor e o cliente são serializadas utilizando a biblioteca binser, codificando a saída desta em base 64. Uma quebra de linha sinaliza o fim da mensagem.
O binser converte internamente inteiros, floats e doubles para representações independentes de plataforma.

Chamada de função: Para chamar uma função registrada no servidor o cliente envia para o servidor o nome da função (como string) seguido dos parâmetros, preservando os tipos desses. Esses parâmetros podem ser de um tipo primitivo (Int, Double, String) ou uma struct definida na IDL, possivelmente outras structs aninhadas. As structs são presentadas por tabelas Lua em que cada entrada é da forma "nome do campo" = valor.

Retorno da função: O servidor retorna para o cliente um boleano indicando se a execução foi bem sucedida, seguido do retorno da função e dos parâmetros out/inout. Em caso de erro, o servidor retorna apenas 'false' seguido de uma string com uma mensagem de erro. Essa interface foi inspirada na função 'pcall' de Lua.
Se o tipo de retorno da função for ‘void’, esse retorno é omitido e apenas parâmetros out/inout são retornados. Em particular, se a função não tiver retorno nem parâmetros de saída, é enviada apenas uma quebra de linha para o cliente (resultado da serialização de um nil pelo binser).
Se múltiplas interfaces forem utilizadas, cada uma utiliza uma conexão em uma porta dedicada.

Verificações

Tanto no cliente como no servidor verificamos se os tipos passados como parâmetro para a função estão de acordo com os definidos na IDL. Ambos os lados também validam se os tipos retornados pela função estão de acordo com os especificados na IDL.
Chamadas que podem gerar erros Lua são executadas utilizando-se 'pcall' afim de capturar e tratar apropriadamente o erro. Em particular, erros no servidor são propagados para o cliente pelo protocolo descrito acima.
No cliente, o proxy gera erros Lua no caso do servidor indicar erro na execução (ou em caso de erro na comunicação). Dessa forma, a utilização do proxy se assemelha a chamar a função do servidor como se fosse local e o tratamento de erro pode ser feito de maneira uniforme.

Extras

Tanto o cliente como o servidor suportam múltiplas IDLs e múltiplas interfaces por IDL.
Structs podem ser aninhadas.

Pool de conexões

O servidor possui um pool que suporta até 3 conexões. Caso esse número seja excedido, fechamos a conexão de um dos clientes. O primeiro cliente no buffer de conexões é desconectado (na prática, um cliente aleatório).
