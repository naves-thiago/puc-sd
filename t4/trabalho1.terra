#include "/home/terra/TerraNG/terra/TerraNet.defs"

#define TTL 50             // Time to leave
#define HOP_INVALID 255    // Codigo de no invalido (posicao vazia)
#define EVENT_INVALID 255  // Codigo de evento invalido (posicao vazia)
#define MAX_DISTANCE 254   // Tamanho maximo de uma rota
#define MAX_ROUTES 10      // Tamanho da tabela de rotas (inclui vizinhos)
#define MAX_EVENTS 2       // Quantidade maxima de ids de eventos

#define TYPE_HELLO       1
#define TYPE_AGENT       2
#define TYPE_QUERY       3
#define TYPE_TEMPERATURE 4

pktype tempMsg from radioMsg with
	var ubyte  hops;           // Hops dessa mensagem
	var ubyte  nextHop;        // Vizinho alvo
	var ubyte  eventId;        // ID do evento
	var ubyte destinationId;   // ID do destinatario
	var short  temperature;    // Temperatura lida
end

pktype agentMsg from radioMsg with
	var ubyte hops;                       // Hops dessa mensagem
	var ubyte nextHop;                    // Vizinho alvo
	var ubyte[MAX_EVENTS] eventDistance;  // Distancia correspondente a cada ID
end

pktype queryMsg from radioMsg with
	var ubyte  hops;     // Hops dessa mensagem
	var ubyte  nextHop;  // Vizinho alvo
	var ubyte  eventId;  // ID do evento desejado
	var ubyte origin;    // ID do remetente
end

pktype helloMsg from radioMsg with // Nao tem payload
end

#define SEARCH(vec, count, value, res) \
	res = -1;                          \
	loop search_i, (count) do          \
		if vec[search_i] == value then \
			res = search_i;            \
		end                            \
	end

#define FILL(vec, count, value) \
	loop fill_i, (count) do     \
		vec[fill_i] = value;    \
	end

#define AGENT_MERGE_EVENTS(m)                                \
	loop i, MAX_EVENTS do                                    \
		if m.eventDistance[i] < eventDistance[i] then        \
			eventDistance[i] = m.eventDistance[i];           \
			eventHop[i] = m.source;                          \
		else                                                 \
			m.eventDistance[i] = eventDistance[i];           \
		end                                                  \
		/* Previne overflow */                               \
		m.eventDistance[i] = (m.eventDistance[i] + 1) & 254; \
	end

var ubyte ourId = getNodeId();
var ubyte[8] neighbors;
var ubyte neighborCount = 0;

var ubyte[MAX_EVENTS] eventHop;      // EventHop[event_id] = proximo hop (node_id)
var ubyte[MAX_EVENTS] eventDistance; // Numero de hops na rota

var ubyte[MAX_ROUTES] nodeId;       // Nos conhecidos (ids)
var ubyte[MAX_ROUTES] nodeHop;      // Node_id = nodeId[i]; hop = nodeHop[i]
var ubyte[MAX_ROUTES] nodeDistance; // Numero de hops na rota
var ubyte nodeCount = 0;

var ubyte sendDelay = (ourId % 5) + 1; // Delay para evitar que todos mandem ao mesmo tempo

par do // -------- INIT --------
//	emit LEDS(0); // DEBUG
	await (sendDelay)s;

	FILL(eventHop, MAX_EVENTS, HOP_INVALID)
	FILL(eventDistance, MAX_EVENTS, MAX_DISTANCE)
	FILL(nodeId, MAX_ROUTES, HOP_INVALID)
	FILL(nodeDistance, MAX_ROUTES, MAX_DISTANCE)
	qClear();

	var helloMsg msgHello;
	msgHello.type = TYPE_HELLO;
	msgHello.target = BROADCAST;
	msgHello.source = ourId;
	emit SEND(msgHello);
	await SEND_DONE;
	await FOREVER;

with // -------- HELLO --------
	loop do
		var helloMsg m = await RECEIVE(TYPE_HELLO);
		var byte found;
		SEARCH(neighbors, neighborCount, m.source, found)
		if found == -1 then
			neighbors[neighborCount] = m.source;
			neighborCount = neighborCount + 1;
			nodeId[nodeCount] = m.source;
			nodeHop[nodeCount] = m.source;
			nodeDistance[nodeCount] = 1;
			nodeCount = nodeCount + 1;
		end
		//emit LEDS(nodeCount & 7);
	end

with  // -------- AGENT --------
	loop do
		var agentMsg m = await RECEIVE(TYPE_AGENT);
		AGENT_MERGE_EVENTS(m)

		// Detecta vizinho
//		var byte found;
//		SEARCH(nodeId, nodeCount, m.source, found)
//		if found == -1 then
//			found = nodeCount;
//			nodeCount = nodeCount + 1;
//		end
//		if nodeDistance[found] > m.hops then
//			nodeId[found] = m.origin;
//			nodeHop[found] = m.source;
//			nodeDistance[found] = m.hops;
//		end

		if m.hops < TTL and m.nextHop == ourId then
			m.hops = m.hops + 1;
			m.source = ourId;
			// TODO nao mandar pra quem nos mandou
			// (bota no fim da lista e faz random % (count-1))
			m.nextHop = neighbors[random() % neighborCount];
			// ...
			qPut(m);
		end

		//emit LEDS(eventDistance[1]); // DEBUG
	end

with // -------- QUERY --------
	loop do
		var queryMsg m = await RECEIVE(TYPE_QUERY);
		var tempMsg mt;

		// Adiciona / atualiza rota para origem
		m.hops = m.hops + 1;
		var byte found;
		SEARCH(nodeId, nodeCount, m.origin, found)
//		if found == -1 then
//			found = nodeCount;
//			nodeCount = nodeCount + 1;
//			emit LED1(ON);
//		end
//		if nodeDistance[found] > m.hops then
//			nodeId[found] = m.origin;
//			nodeHop[found] = m.source;
//			nodeDistance[found] = m.hops;
//		end

		if m.nextHop == ourId then
			if m.eventId == 1 and ourId == 11 then // TODO configurar ID pra nos diferentes
				//emit LED0(ON);
				emit REQ_TEMP;
				mt.temperature = await TEMP;
				mt.hops = 0;
				mt.target = BROADCAST;
				mt.type = TYPE_TEMPERATURE;
				mt.destinationId = m.origin;
				mt.eventId = 1;
				mt.source = ourId;
				mt.nextHop = m.source;
				qPut(mt);
			else
				if m.hops < TTL then
					// Apenas repassa
					m.nextHop = eventHop[m.eventId];
					m.source = ourId;
					if m.nextHop == EVENT_INVALID then
						// TODO nao mandar pra quem nos mandou
						m.nextHop = neighbors[random() % neighborCount];
					end
					qPut(m);
				end
			end
		end
	end

with // -------- TEMPERATURE --------
	loop do
		var tempMsg m = await RECEIVE(TYPE_TEMPERATURE);
		if m.hops < TTL and m.nextHop == ourId then
			// TODO configurar ID pra nos diferentes
			//if m.destinationId == ourId and m.temperature > 500 then
			if m.destinationId == ourId then
				if m.temperature > 500 then
					emit LED1(ON);
				end

				if m.temperature < 300 then
					emit LED2(ON);
				end
			else
				// Tem que existir uma rota conhecida
				var byte found;
				SEARCH(nodeId, nodeCount, m.destinationId, found)
				//if found == -1 then
				//	// Nao deveria ocorrer
				//	loop do
				//		emit LED1(TOGGLE);
				//		await 1s;
				//	end
				//end
				m.nextHop = nodeHop[found];
				m.hops = m.hops + 1;
				qPut(m);
			end
		end
	end

with // -------- FILA --------
	loop do
		await Q_READY;
		await (sendDelay * 100)ms;
		loop do
			// Parece que podemos usar qualquer tipo de mensagem
			// para repassar da fila pro radio
			var agentMsg m;
			if qGet(m) == SUCCESS then
				emit SEND(m);
				await SEND_DONE;
			else
				break;
			end
		end
	end

with // -------- GERA EVENTOS --------
	var ubyte sent_temp = TRUE;
	var ubyte above_photo = TRUE;
	loop do
		emit REQ_TEMP;
		var ushort temp = await TEMP;
		if (temp > 500 or temp < 300) and sent_temp then
			sent_temp = FALSE;
			var agentMsg m;
			m.source = ourId;
			m.target = BROADCAST;
			m.type = TYPE_AGENT;
			m.hops = 0;
			m.nextHop = neighbors[random() % neighborCount];
			FILL(m.eventDistance, MAX_EVENTS, EVENT_INVALID)
			m.eventDistance[1] = 1;
			qPut(m);
		end
		if (temp <= 500 and temp >= 300) then
			sent_temp = TRUE;
		end

		emit REQ_PHOTO;
		var ushort photo = await PHOTO;
		if photo > 400 and above_photo then
			above_photo = FALSE;
			var queryMsg m;
			m.source = ourId;
			m.origin = ourId;
			m.target = BROADCAST;
			m.type = TYPE_QUERY;
			m.hops = 0;
			m.nextHop = neighbors[random() % neighborCount];
			m.eventId = 1;
			qPut(m);
		end

		if photo <= 400 then
			above_photo = TRUE;
		end
		await 1s;
	end
end
