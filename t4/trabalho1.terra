#include "/home/terra/TerraNG/terra/TerraNet.defs"

// Formato das mensagens
// Temperature:
// {
//   ubyte  type;          // Builtin
//   ubyte  hops;
//   ubyte  eventId;       // Evento correspondente
//   ushort destinationId; // Destinatario
//   short  temperature;
// }

// Agent:
// {
//   ubyte type;          // Builtin
// 	 ubyte hops;          // Agent message hops
//   ubyte events[9];     // Lista de ids
//   ubyte eventsHops[9]; // Num hops correspondente a cada id
// }

// Query:
// {
// 	 ubyte  type;    // Builtin
//   ubyte  hops;
//   ubyte  eventId; // Evento desejado
// 	 ushort origin;  // Remetente
// }

// Hello:
// {
//   ubyte type; // Builtin
// }

#define TTL 50
#define HOP_INVALID 255

#define TYPE_HELLO       1
#define TYPE_AGENT       2
#define TYPE_QUERY       3
#define TYPE_TEMPERATURE 4

pktype tempMsg from radioMsg with
	var ubyte  hops;
	var ubyte  eventId;
	var ushort destinationId;
	var short  temperature;
end

pktype agentMsg from radioMsg with
	var ubyte hops;
	var ubyte[9] events;
	var ubyte[9] eventsHops;
end

pktype queryMsg from radioMsg with
	var ubyte  hops;
	var ubyte  eventId;
	var ushort origin;
end

pktype helloMsg from radioMsg with
end

#define SEARCH(vec, count, value, res) \
	res = -1;                          \
	loop i,count do                    \
		if vec[i] == value then        \
			res = i;                   \
			break;                     \
		end                            \
	end

#define FILL(vec, count, value) \
	loop i,count do             \
		vec[i] = value;         \
	end

var ushort ourId = getNodeId();
var ushort[8] neighbours;
var ubyte neighbourCount = 0;

var ushort[81] eventHop; // eventHop[event_id] = node_id

var ubyte[81] nodeId;    // known nodes (ids)
var ushort[81] nodeHop;  // node_id = nodeId[i]; hop = nodeHop[i]
var ubyte nodeCount = 0;

emit LEDS(0); // DEBUG
par do
	var ushort startTime = (ourId % 5) + 1;
	await (startTime)s;

	FILL(eventHop, 81, HOP_INVALID);

	var helloMsg msgHello;
	msgHello.type = TYPE_HELLO;
	msgHello.target = BROADCAST;
	msgHello.source = ourId;
	emit SEND(msgHello);
	await SEND_DONE;
	await FOREVER;
with
	loop do
		var helloMsg m = await RECEIVE(TYPE_HELLO);
		var byte found;
		SEARCH(neighbours, neighbourCount, m.source, found)
		if found == -1 then
			neighbours[neighbourCount] = m.source;
			neighbourCount = neighbourCount + 1;
			nodeId[nodeCount] = m.source;
			nodeHop[nodeCount] = m.source;
			nodeCount = nodeCount + 1;
		end

		emit LEDS(neighbourCount); // DEBUG
	end
/*
with
	loop do
		var agentMsg m = await RECEIVE(TYPE_AGENT);
		// ...
		// coloca mensagem na fila
	end
end
*/
/*
with
	loop do
		var queryMsg m = await RECEIVE(TYPE_QUERY);
		// ...
		// coloca mensagem na fila
	end
end
*/
/*
with
	loop do
		var tempMsg m = await RECEIVE(TYPE_TEMPERATURE);
		// ...
		// coloca mensagem na fila
	end
end
*/
/*
with
	loop do
		// Tira da fila e envia

	end
end
*/
end





