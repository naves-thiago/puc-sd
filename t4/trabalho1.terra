#include "/home/terra/TerraNG/terra/TerraNet.defs"

#define TTL 50
#define HOP_INVALID 255

#define TYPE_HELLO       1
#define TYPE_AGENT       2
#define TYPE_QUERY       3
#define TYPE_TEMPERATURE 4

pktype tempMsg from radioMsg with
	var ubyte  hops;           // Hops dessa mensagem
	var ubyte  eventId;        // ID do evento
	var ushort destinationId;  // ID do destinatario
	var short  temperature;    // Temperatura lida
end

pktype agentMsg from radioMsg with
	var ubyte hops;                // Hops dessa mensagem
	var ubyte[9] events;           // Lista de IDs
	var ubyte[9] eventsDistances;  // Distancia correspondente a cada ID
end

pktype queryMsg from radioMsg with
	var ubyte  hops;     // Hops dessa mensagem
	var ubyte  eventId;  // ID do evento desejado
	var ushort origin;   // ID do remetente
end

pktype helloMsg from radioMsg with // Nao tem payload
end

#define SEARCH(vec, count, value, res) \
	res = -1;                          \
	loop i,count do                    \
		if vec[i] == value then        \
			res = i;                   \
			break;                     \
		end                            \
	end

#define FILL(vec, count, value) \
	loop i,count do             \
		vec[i] = value;         \
	end

var ushort ourId = getNodeId();
var ushort[8] neighbours;
var ubyte neighbourCount = 0;

var ushort[81] eventHop;     // EventHop[event_id] = next hop (node_id)
var ubyte[81] eventDistance; // Number of hops in the route

var ubyte[81] nodeId;       // Known nodes (ids)
var ushort[81] nodeHop;     // Node_id = nodeId[i]; hop = nodeHop[i]
var ubyte[81] nodeDistance; // Number of hops in the route
var ubyte nodeCount = 0;

emit LEDS(0); // DEBUG
par do
	var ushort startTime = (ourId % 5) + 1;
	await (startTime)s;

	FILL(eventHop, 81, HOP_INVALID);
	FILL(eventDistance, 81, 255);

	var helloMsg msgHello;
	msgHello.type = TYPE_HELLO;
	msgHello.target = BROADCAST;
	msgHello.source = ourId;
	emit SEND(msgHello);
	await SEND_DONE;
	await FOREVER;
with
	loop do
		var helloMsg m = await RECEIVE(TYPE_HELLO);
		var byte found;
		SEARCH(neighbours, neighbourCount, m.source, found)
		if found == -1 then
			neighbours[neighbourCount] = m.source;
			neighbourCount = neighbourCount + 1;
			nodeId[nodeCount] = m.source;
			nodeHop[nodeCount] = m.source;
			nodeDistance[nodeCount] = 1;
			nodeCount = nodeCount + 1;
		end

		emit LEDS(neighbourCount); // DEBUG
	end
/*
with
	loop do
		var agentMsg m = await RECEIVE(TYPE_AGENT);
		// ...
		// coloca mensagem na fila
	end
end
*/
/*
with
	loop do
		var queryMsg m = await RECEIVE(TYPE_QUERY);
		// ...
		// coloca mensagem na fila
	end
end
*/
/*
with
	loop do
		var tempMsg m = await RECEIVE(TYPE_TEMPERATURE);
		// ...
		// coloca mensagem na fila
	end
end
*/
/*
with
	loop do
		// Tira da fila e envia

	end
end
*/
end





