#include "/home/terra/TerraNG/terra/TerraNet.defs"

// Formato das mensagens
// Temperature:
// {
//   ubyte  type;          // Builtin
//   ubyte  hops;
//   ubyte  eventId;       // Evento correspondente
//   ushort destinationId; // Destinatario
//   short  temperature;
// }

// Agent:
// {
//   ubyte type;          // Builtin
// 	 ubyte hops;          // Agent message hops
//   ubyte events[9];     // Lista de ids
//   ubyte eventsHops[9]; // Num hops correspondente a cada id
// }

// Query:
// {
// 	 ubyte  type;    // Builtin
//   ubyte  hops;
//   ubyte  eventId; // Evento desejado
// 	 ushort origin;  // Remetente
// }

// Hello:
// {
//   ubyte type; // Builtin
// }

#define TTL 50

#define TYPE_HELLO        1
#define TYPE_AGENT        2
#define TYPE_QUERY        3
#define TYPE_TEMPERATURE  4

pktype tempMsg from radioMsg with
	var ubyte  hops;
	var ubyte  eventId;
	var ushort destinationId;
	var short  temperature;
end

pktype agentMsg from radioMsg with
	var ubyte hops;
	var ubyte[9] events;
	var ubyte[9] eventsHops;
end

pktype queryMsg from radioMsg with
	var ubyte  hops;
	var ubyte  eventId;
	var ushort origin;
end

pktype helloMsg from radioMsg with
end

var ushort nodeId = getNodeId();
var ushort[8] neighbours;
var ubyte neighbourCount = 0;

var helloMsg msgHello;
msgHello.type = TYPE_HELLO;
msgHello.target = BROADCAST;
msgHello.source = nodeId;
var ushort startTime = (nodeId % 5) + 1;
emit LEDS(0); // DEBUG
par do
	await (startTime)s;
	emit SEND(msgHello);
	await SEND_DONE;
	await FOREVER;
with
	loop do
		var helloMsg m = await RECEIVE(TYPE_HELLO);
		var ubyte found = 0;
		loop i,neighbourCount do  // i = 0~count-1
			if neighbours[i] == m.source then
				found = 1;
				break;
			end
		end
		if not found then
			neighbours[neighbourCount] = m.source;
			neighbourCount = neighbourCount + 1;
		end
		emit LEDS(neighbourCount); // DEBUG
	end
/*
with
	loop do
		emit LED0(TOGGLE);
		await 1s;
	end
*/
end





