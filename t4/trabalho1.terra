#include "/home/terra/TerraNG/terra/TerraNet.defs"

#define TTL 50             // Time to leave
#define HOP_INVALID 255    // Codigo de no invalido (posicao vazia)
#define EVENT_INVALID 255  // Codigo de evento invalido (posicao vazia)
#define MAX_DISTANCE 255   // Tamanho maximo de uma rota
#define MAX_ROUTES 5       // Tamanho da tabela de rotas
#define MAX_EVENTS 5       // Quantidade maxima de ids de eventos
#define AGENT_MAX_EVENTS 2 // Maximo de eventos que o agent pode carregar

#define TYPE_HELLO       1
#define TYPE_AGENT       2
#define TYPE_QUERY       3
#define TYPE_TEMPERATURE 4

pktype tempMsg from radioMsg with
	var ubyte  hops;           // Hops dessa mensagem
	var ubyte  eventId;        // ID do evento
	var ushort destinationId;  // ID do destinatario
	var short  temperature;    // Temperatura lida
end

pktype agentMsg from radioMsg with
	var ubyte hops;                               // Hops dessa mensagem
	var ubyte nextHop;                            // Vizinho alvo
	var ubyte[AGENT_MAX_EVENTS] events;           // Lista de IDs
	var ubyte[AGENT_MAX_EVENTS] eventsDistances;  // Distancia correspondente a cada ID
end

pktype queryMsg from radioMsg with
	var ubyte  hops;     // Hops dessa mensagem
	var ubyte  nextHop;  // Vizinho alvo
	var ubyte  eventId;  // ID do evento desejado
	var ushort origin;   // ID do remetente
end

pktype helloMsg from radioMsg with // Nao tem payload
end

#define SEARCH(vec, count, value, res) \
	res = -1;                          \
	loop search_i, (count) do          \
		if vec[search_i] == value then \
			res = search_i;            \
			break;                     \
		end                            \
	end

#define FILL(vec, count, value) \
	loop fill_i, (count) do     \
		vec[fill_i] = value;    \
	end

#define AGENT_ADD_EVENT(m, index, start)                              \
	loop aae_e, MAX_EVENTS do                                         \
		var ubyte eventId = (aae_e + start) % MAX_EVENTS;             \
		if eventHop[eventId] != EVENT_INVALID then                    \
			/* Verifica se o evento ja ta na mensagem */              \
			var byte found;                                           \
			SEARCH(m.events, index, eventId, found)                   \
			if found == -1 then                                       \
				m.events[index] = eventId;                            \
				m.eventsDistances[index] = eventDistance[eventId];    \
				break;                                                \
			end                                                       \
			/* Ja ta, mas o nosso e melhor */                         \
			if m.eventsDistances[found] > eventDistance[eventId] then \
				m.eventsDistances[found] = eventDistance[eventId];    \
			end                                                       \
		end                                                           \
	end

#define AGENT_FILL_EVENTS(m)                                \
	do                                                      \
		var ubyte start = random() % MAX_EVENTS;            \
		loop afe_i, AGENT_MAX_EVENTS do                     \
			if m.events[afe_i] == EVENT_INVALID then        \
				AGENT_ADD_EVENT(m, afe_i, start)            \
				if m.events[afe_i] == EVENT_INVALID then    \
					/* Nao tem eventos suficientes para     \
					   preencher a mensagem */              \
					break;                                  \
				end                                         \
				start = (m.events[afe_i] + 1) % MAX_EVENTS; \
			end                                             \
		end                                                 \
	end

var ushort ourId = getNodeId();
var ushort[8] neighbors;
var ubyte neighborCount = 0;

var ushort[MAX_EVENTS] eventHop;     // EventHop[event_id] = proximo hop (node_id)
var ubyte[MAX_EVENTS] eventDistance; // Numero de hops na rota

var ubyte[MAX_ROUTES] nodeId;       // Nos conhecidos (ids)
var ushort[MAX_ROUTES] nodeHop;     // Node_id = nodeId[i]; hop = nodeHop[i]
var ubyte[MAX_ROUTES] nodeDistance; // Numero de hops na rota
var ubyte nodeCount = 0;

var ushort sendDelay = (ourId % 5) + 1; // Delay para evitar que todos mandem ao mesmo tempo

emit LEDS(0); // DEBUG
await (sendDelay)s;

FILL(eventHop, MAX_EVENTS, HOP_INVALID);
FILL(eventDistance, MAX_EVENTS, MAX_DISTANCE);
qClear();

var helloMsg msgHello;
msgHello.type = TYPE_HELLO;
msgHello.target = BROADCAST;
msgHello.source = ourId;
emit SEND(msgHello);
await SEND_DONE;

par do // -------- INIT --------
//with // -------- HELLO --------
	loop do
		var helloMsg m = await RECEIVE(TYPE_HELLO);
		var byte found;
		SEARCH(neighbors, neighborCount, m.source, found)
		if found == -1 then
			neighbors[neighborCount] = m.source;
			neighborCount = neighborCount + 1;
			nodeId[nodeCount] = m.source;
			nodeHop[nodeCount] = m.source;
			nodeDistance[nodeCount] = 1;
			nodeCount = nodeCount + 1;
		end
	end

with  // -------- AGENT --------
	loop do
		var agentMsg m = await RECEIVE(TYPE_AGENT);
		// Atualiza nossa tabela de rota de eventos
		loop i, AGENT_MAX_EVENTS do
			var ubyte id = m.events[i];
			if id == EVENT_INVALID then
				break;
			end
			if eventDistance[id] > m.eventsDistances[i] then
				eventDistance[id] = m.eventsDistances[i];
				eventHop[id] = m.source;
			end
		end

		emit LEDS(eventDistance[1]); // DEBUG

		if m.hops < TTL and m.nextHop == ourId then
			m.hops = m.hops + 1;
			// Escolhe eventos da nossa tabela para
			// colocar na mensagem. Tambem atualiza
			// rotas se soubermos uma menor
			AGENT_FILL_EVENTS(m)
			loop i, AGENT_MAX_EVENTS do
				m.eventsDistances[i] = m.eventsDistances[i] + 1;
			end
			m.source = ourId;
			// TODO nao mandar pra quem nos mandou
			// (bota no fim da lista e faz random % (count-1))
			m.nextHop = neighbors[random() % neighborCount];
			// ...
			qPut(m);
		end
	end

with // -------- QUERY --------
	loop do
		var queryMsg m = await RECEIVE(TYPE_QUERY);
		var tempMsg mt;

		// Adiciona / atualiza rota para origem
		// TODO testar
		var byte found;
		SEARCH(nodeId, nodeCount, m.origin, found)
		if found == -1 then
			found = nodeCount;
			nodeCount = nodeCount + 1;
		end
		if nodeDistance[found] > m.hops then
			nodeId[found] = m.origin;
			nodeHop[found] = m.source;
			nodeDistance[found] = m.hops;
		end

		if m.nextHop == ourId then
			m.hops = m.hops + 1;
			if m.eventId == 1 then // TODO configurar ID pra nos diferentes
				emit REQ_TEMP;
				mt.temperature = await TEMP;
				mt.hops = 0;
				mt.target = BROADCAST;
				mt.type = TYPE_TEMPERATURE;
				mt.destinationId = m.origin;
				mt.eventId = 1;
				mt.source = ourId;
				//emit LED0(ON);
				qPut(mt);
			else
				if m.hops < TTL then
					// Apenas repassa
					m.nextHop = eventHop[m.eventId];
					if m.nextHop == EVENT_INVALID then
						// TODO nao mandar pra quem nos mandou
						m.nextHop = neighbors[random() % neighborCount];
					end

					qPut(m);
				end
			end
		end
	end

with // -------- TEMPERATURE --------
	loop do
		var tempMsg m = await RECEIVE(TYPE_TEMPERATURE);
		if m.hops < TTL then
			// TODO configurar ID pra nos diferentes
			if m.eventId == 1 and m.temperature <= 500 then
				emit LED1(ON);
			end
		end
	end

with // -------- FILA --------
	loop do
		await Q_READY;
		await (sendDelay * 100)ms;
		loop do
			// Parece que podemos usar qualquer tipo de mensagem
			// para repassar da fila pro radio
			var agentMsg m;
			if qGet(m) == SUCCESS then
				emit SEND(m);
				await SEND_DONE;
			else
				break;
			end
		end
	end

/*
with // -------- TESTE DA FILA --------
	if ourId == 11 then
		await 1500ms;
		var queryMsg m;
		m.source = ourId;
		m.target = BROADCAST;
		m.type = TYPE_QUERY;
		m.origin = 42;
		qPut(m);
	else
		var queryMsg m;
		m = await RECEIVE;
		if m.origin == 42 then
			emit LED1(ON);
		end
	end
	await FOREVER;
*/

with // -------- GERA EVENTOS --------
	var ubyte above_temp = FALSE;
	var ubyte above_photo = FALSE;
	loop do
		emit REQ_TEMP;
		var ushort temp = await TEMP;
		if temp > 500 and not above_temp then
			above_temp = TRUE;
			var agentMsg m;
			m.source = ourId;
			m.target = BROADCAST;
			m.type = TYPE_AGENT;
			m.hops = 0;
			// TODO nao mandar pra quem nos mandou
			m.nextHop = neighbors[random() % neighborCount];

			//m.events[0] = ourId; // Event ID
			m.events[0] = 1; // Event ID
			m.eventsDistances[0] = 0; // Tamanho da rota
			// TODO adicionar rotas conhecidas (aleatorias)
			m.events[1] = EVENT_INVALID;
			qPut(m);
		end
		if temp <= 500 then
			above_temp = FALSE;
		end

		emit REQ_PHOTO;
		var ushort photo = await PHOTO;
		if photo > 400 and not above_photo then
			above_photo = TRUE;
			var queryMsg m;
			m.source = ourId;
			m.origin = ourId;
			m.target = BROADCAST;
			m.type = TYPE_QUERY;
			m.hops = 0;
			m.eventId = 1;
			qPut(m);
		end

		if photo <= 400 then
			above_photo = FALSE;
		end
		await 1s;
	end
	//await FOREVER;
end
