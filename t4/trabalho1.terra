#include "/home/terra/TerraNG/terra/TerraNet.defs"

#define TTL 50
#define HOP_INVALID 255
#define EVENT_INVALID 255
#define MAX_DISTANCE 255

#define TYPE_HELLO       1
#define TYPE_AGENT       2
#define TYPE_QUERY       3
#define TYPE_TEMPERATURE 4

pktype tempMsg from radioMsg with
	var ubyte  hops;           // Hops dessa mensagem
	var ubyte  eventId;        // ID do evento
	var ushort destinationId;  // ID do destinatario
	var short  temperature;    // Temperatura lida
end

pktype agentMsg from radioMsg with
	var ubyte hops;                // Hops dessa mensagem
	var ubyte nextHop;             // Vizinho alvo
	var ubyte[9] events;           // Lista de IDs
	var ubyte[9] eventsDistances;  // Distancia correspondente a cada ID
end

pktype queryMsg from radioMsg with
	var ubyte  hops;     // Hops dessa mensagem
	var ubyte  eventId;  // ID do evento desejado
	var ushort origin;   // ID do remetente
end

pktype helloMsg from radioMsg with // Nao tem payload
end

#define SEARCH(vec, count, value, res) \
	res = -1;                          \
	loop i,count do                    \
		if vec[i] == value then        \
			res = i;                   \
			break;                     \
		end                            \
	end

#define FILL(vec, count, value) \
	loop i,count do             \
		vec[i] = value;         \
	end

var ushort ourId = getNodeId();
var ushort[8] neighbors;
var ubyte neighborCount = 0;

var ushort[10] eventHop;     // EventHop[event_id] = proximo hop (node_id)
var ubyte[10] eventDistance; // Numero de hops na rota

var ubyte[10] nodeId;       // Nos conhecidos (ids)
var ushort[10] nodeHop;     // Node_id = nodeId[i]; hop = nodeHop[i]
var ubyte[10] nodeDistance; // Numero de hops na rota
var ubyte nodeCount = 0;

emit LEDS(0); // DEBUG
par do // -------- INIT --------
	var ushort startTime = (ourId % 5) + 1;
	await (startTime)s;

	FILL(eventHop, 81, HOP_INVALID);
	FILL(eventDistance, 81, MAX_DISTANCE);
	qClear();

	var helloMsg msgHello;
	msgHello.type = TYPE_HELLO;
	msgHello.target = BROADCAST;
	msgHello.source = ourId;
	emit SEND(msgHello);
	await SEND_DONE;
	await FOREVER;

with // -------- HELLO --------
	loop do
		var helloMsg m = await RECEIVE(TYPE_HELLO);
		var byte found;
		SEARCH(neighbors, neighborCount, m.source, found)
		if found == -1 then
			neighbors[neighborCount] = m.source;
			neighborCount = neighborCount + 1;
			nodeId[nodeCount] = m.source;
			nodeHop[nodeCount] = m.source;
			nodeDistance[nodeCount] = 1;
			nodeCount = nodeCount + 1;
		end
//		emit LEDS(neighborCount); // DEBUG
	end

with  // -------- AGENT --------
	loop do
		var agentMsg m = await RECEIVE(TYPE_AGENT);
		var ubyte mEventCount = 0;
		// Atualiza nossa tabela de rota de eventos
		loop i,9 do
			var ubyte id = m.events[i];
			if id == EVENT_INVALID then
				break;
			end
			mEventCount = mEventCount + 1;
			if eventDistance[id] > m.eventsDistances[i] + 1 then
				eventDistance[id] = m.eventsDistances[i] + 1;
				eventHop[id] = m.source;
				var ubyte tmp = eventDistance[id];
				if tmp > 7 then
					tmp = 7;
				end
				emit LEDS(tmp);
			end
			m.eventsDistances[i] = eventDistance[id];
		end

		if m.hops < TTL and m.nextHop == ourId then
			m.hops = m.hops + 1;
			if mEventCount < 9 then
				// TODO:
				// Escolhe eventos da nossa tabela para
				// colocar na mensagem
			end
			m.source = ourId;
			// TODO nao mandar pra quem nos mandou
			m.nextHop = neighbors[random() % neighborCount];
			// ...
			await 1s;
			qPut(m);
		end
	end

/*
with // -------- QUERY --------
	loop do
		var queryMsg m = await RECEIVE(TYPE_QUERY);
		// ...
		// coloca mensagem na fila
	end
end
*/

/*
with // -------- TEMPERATURE --------
	loop do
		var tempMsg m = await RECEIVE(TYPE_TEMPERATURE);
		// ...
		// coloca mensagem na fila
	end
end
*/

with // -------- FILA --------
	loop do
		await Q_READY;
		//emit LED2(ON);  // DEBUG
		loop do
			// Parece que podemos usar qualquer tipo de mensagem
			// para repassar da fila pro radio
			var helloMsg m;
			var ubyte stat = qGet(m);
			if stat == SUCCESS then
				emit SEND(m);
				await SEND_DONE;
			else
				break;
			end
		end
	end

/*
with // -------- TESTE DA FILA --------
	if ourId == 11 then
		await 1500ms;
		var queryMsg m;
		m.source = ourId;
		m.target = BROADCAST;
		m.type = TYPE_QUERY;
		m.origin = 42;
		qPut(m);
	else
		var queryMsg m;
		m = await RECEIVE;
		if m.origin == 42 then
			emit LED1(ON);
		end
	end
	await FOREVER;
*/

with // -------- GERA EVENTOS --------
	var ubyte above = FALSE;
	loop do
		emit REQ_TEMP;
		var ushort temp = await TEMP;
		if temp > 500 and not above then
			above = TRUE;
			var agentMsg m;
			m.source = ourId;
			m.target = BROADCAST;
			m.type = TYPE_AGENT;
			m.hops = 0;
			// TODO nao mandar pra quem nos mandou
			m.nextHop = neighbors[random() % neighborCount];

			//m.events[0] = ourId; // Event ID
			m.events[0] = 1; // Event ID
			m.eventsDistances[0] = 0; // Tamanho da rota
			// TODO adicionar rotas conhecidas (aleatorias)
			m.events[1] = EVENT_INVALID;
			qPut(m);
		end
		if temp <= 500 then
			above = FALSE;
		end
		await 1s;
	end
	//await FOREVER;
end
